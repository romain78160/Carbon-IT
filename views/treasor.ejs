<div>
    <span>trésors</span>
    <div class="form-group">
        <label class="col-sm-3 control-label" for="treasorX">position X</label>
        <div class="col-sm-2">
            <%- include('inputSpin/component',
                {
                    id: 'treasorX',
                    value: 2,
                    className: "",
                    isrequired: "required",
                    min: 0,
                    max: 30,
                    step: 1,
                    decimals: 0
                }
            ) %>
        </div>
    </div>
    <div class="form-group">
        <label class="col-sm-3 control-label" for="treasorY">position Y</label>
        <div class="col-sm-2">
            <%- include('inputSpin/component',
                {
                    id: 'treasorY',
                    value: 2,
                    className: "",
                    isrequired: "required",
                    min: 0,
                    max: 30,
                    step: 1,
                    decimals: 0
                }
            ) %>
        </div>
    </div>
    <div class="form-group">
        <label class="col-sm-3 control-label" for="treasorNb">nb</label>
        <div class="col-sm-2">
            <%- include('inputSpin/component',
                {
                    id: 'treasorNb',
                    value: 1,
                    className: "",
                    isrequired: "required",
                    min: 0,
                    max: 30,
                    step: 1,
                    decimals: 0
                }
            ) %>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <div class="mb-md">
                    <button id="addTreasor" class="btn btn-primary">Ajouter<i class="fa fa-plus"></i></button>
                </div>
            </div>
        </div>
        <table class="table table-bordered table-striped mb-none" id="tableTreasor">
            <thead>
                <tr>
                    <th>Position X</th>
                    <th>Position Y</th>
                    <th>Nombre</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody>
            
            </tbody>
        </table>
    </div>
</div>

<script src="<%= baseurl %>javascripts/datatables/datatables.custom.js"></script>
<script src="<%= baseurl %>javascripts/datatables/natural.js"></script>


<script>

var treasorList = [];


(function( $ ) {

    'use strict';

    var treasorTable = {

        options: {
            addButton: '#addTreasor',
            table: '#tableTreasor',
            dialog: {
                wrapper: '#dialog',
                cancelButton: '#dialogCancel',
                confirmButton: '#dialogConfirm',
            }
        },

        initialize: function() {
            this
                .setVars()
                .build()
                .events();
        },

        setVars: function() {
            this.$table				= $( this.options.table );
            this.$addButton			= $( this.options.addButton );

            // dialog
            this.dialog				= {};
            this.dialog.$wrapper	= $( this.options.dialog.wrapper );
            this.dialog.$cancel		= $( this.options.dialog.cancelButton );
            this.dialog.$confirm	= $( this.options.dialog.confirmButton );

            return this;
        },

        build: function() {
            this.datatable = this.$table.DataTable({
                aoColumns: [
                    null,
                    null,
                    null,
                    { "bSortable": false }
                ],
                oLanguage: {
                    "sProcessing": "Traitement en cours ...",
                    "sLengthMenu": "Afficher _MENU_ lignes",
                    "sZeroRecords": "Aucun résultat trouvé",
                    "sEmptyTable": "Aucune donnée disponible",
                    "sInfo": "Lignes _START_ à _END_ sur _TOTAL_",
                    "sInfoEmpty": "Aucune ligne affichée",
                    "sInfoFiltered": "(Filtrées à partir de _MAX_ résultats)",
                    "sInfoPostFix": "",
                    "sSearch": "Chercher:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Chargement...",
                    "oPaginate": {
                    "sFirst": "Premier", "sLast": "Dernier", "sNext": "Suivant", "sPrevious": "Précédent"
                    },
                    "oAria": {
                    "sSortAscending": ": Trier par ordre croissant", "sSortDescending": ": Trier par ordre décroissant"
                    },
                    "sDecimal": ",",
                    "sThousands": " "
                }
            });

            window.dt = this.datatable;

            return this;
        },

        events: function() {
            var _self = this;

            this.$table
                .on('click', 'a.save-row', function( e ) {
                    e.preventDefault();

                    _self.rowSave( $(this).closest( 'tr' ) );
                })
                .on('click', 'a.cancel-row', function( e ) {
                    e.preventDefault();

                    _self.rowCancel( $(this).closest( 'tr' ) );
                })
                .on('click', 'a.edit-row', function( e ) {
                    e.preventDefault();

                    _self.rowEdit( $(this).closest( 'tr' ) );
                })
                .on( 'click', 'a.remove-row', function( e ) {
                    e.preventDefault();

                    var $row = $(this).closest( 'tr' );
                    _self.rowRemove( $row );

                });

            this.$addButton.on( 'click', function(e) {
                e.preventDefault();

                _self.rowAdd();
            });

            this.dialog.$cancel.on( 'click', function( e ) {
                e.preventDefault();
                $.magnificPopup.close();
            });

            return this;
        },

        rowAdd: function() {

            var treasorExist = treasorList.find(aTreasor => aTreasor.X == $("#treasorX").val() && aTreasor.Y == $("#treasorY").val() );

            if(treasorExist){
                treasorExist.nb = treasorExist.nb + parseInt($("#treasorNb").val(), 10);
                $("#"+treasorExist.id).find("td.treasorNb").html(treasorExist.nb);

                new PNotify({
                    title: 'Trésors déjà présent',
                    text: 'Ajout du nombre de trésor sur ces coordonnées',
                    type: 'custom',
                    addclass: 'notification-warning',
                    icon: 'fa fa-exclamation'
                });
                return;
            }

            //check tresor sur montagne
            var treasorOnMount = mountainList.find(amount => amount.X == $("#treasorX").val() && amount.Y == $("#treasorY").val() );
            if (treasorOnMount) {
                new PNotify({
                    title: 'Coordonnées',
                    text: 'Impossible le trésor est sur une montagne',
                    type: 'custom',
                    addclass: 'notification-danger',
                    icon: 'fa fa-times'
                });
                return;
            }

            this.$addButton.attr({ 'disabled': 'disabled' });

            var actions,
                data,
                $row;

            actions = [
                '<a href="#" class="hidden on-editing save-row"><i class="fa fa-save"></i></a>',
                '<a href="#" class="hidden on-editing cancel-row"><i class="fa fa-times"></i></a>',
                // '<a href="#" class="on-default edit-row"><i class="fa fa-pencil"></i></a>',
                '<a href="#" class="on-default remove-row"><i class="fa fa-trash-o"></i></a>'
            ].join(' ');

            data = this.datatable.row.add([ '', '', '', actions ]);
            $row = this.datatable.row( data[0] ).nodes().to$();		

            $row
                .addClass( 'adding' )
                .find( 'td:last' )
                .addClass( 'actions' );
                
            $row.find( 'td:first' )
                .addClass( 'treasorX' );
            $row.children().eq(1)
                .addClass( 'treasorY' );
            $row.children().eq(2)
                .addClass( 'treasorNb' );
                
            this.rowEdit( $row );

            this.datatable.order([0,'asc']).draw(); // always show fields
        },

        rowCancel: function( $row ) {
            var _self = this,
                $actions,
                i,
                data;

            if ( $row.hasClass('adding') ) {
                this.rowRemove( $row );
            } else {

                data = this.datatable.row( $row.get(0) ).data();
                this.datatable.row( $row.get(0) ).data( data );

                $actions = $row.find('td.actions');
                if ( $actions.get(0) ) {
                    this.rowSetActionsDefault( $row );
                }

                this.datatable.draw();
            }
        },

        rowEdit: function( $row ) {

            var _self = this,
                data;

            data = this.datatable.row( $row.get(0) ).data();

            $row.children( 'td' ).each(function( i ) {
                var $this = $( this );			

                if ( $this.hasClass('actions') ) {
                    _self.rowSetActionsEditing( $row );
                } else {

                    if ( $this.hasClass('treasorX') ) {
                        $this.html( '<input type="text" class="form-control input-block" value="' + $("#treasorX").val() + '"/>' );
                    }
                    if ( $this.hasClass('treasorY') ) {
                        $this.html( '<input type="text" class="form-control input-block" value="' + $("#treasorY").val() + '"/>' );
                    }
                    if ( $this.hasClass('treasorNb') ) {
                        $this.html( '<input type="text" class="form-control input-block" value="' + $("#treasorNb").val() + '"/>' );
                    }
                }
            });

            var aTreasor = {
                id: 'treasor_'+$("#treasorX").val()+"_"+$("#treasorY").val(),
                X: parseInt($("#treasorX").val(), 10),
                Y: parseInt($("#treasorY").val(), 10),
                nb: parseInt($("#treasorNb").val(), 10)
            }
            treasorList.push(aTreasor);
            $row.attr('id', aTreasor.id);

            this.rowSave( $row );
        },

        rowSave: function( $row ) {
            var _self     = this,
                $actions,
                values    = [];

            if ( $row.hasClass( 'adding' ) ) {
                this.$addButton.removeAttr( 'disabled' );
                $row.removeClass( 'adding' );
            }

            values = $row.find('td').map(function() {
                var $this = $(this);

                if ( $this.hasClass('actions') ) {
                    _self.rowSetActionsDefault( $row );
                    return _self.datatable.cell( this ).data();
                } else {
                    return $.trim( $this.find('input').val() );
                }
            });

            this.datatable.row( $row.get(0) ).data( values );

            $actions = $row.find('td.actions');
            if ( $actions.get(0) ) {
                this.rowSetActionsDefault( $row );
            }

            this.datatable.draw();
        },

        rowRemove: function( $row ) {
            if ( $row.hasClass('adding') ) {
                this.$addButton.removeAttr( 'disabled' );
            }

            treasorList = treasorList.filter(( atreasor ) => {return atreasor.id !== $row.get(0).id;});

            this.datatable.row( $row.get(0) ).remove().draw();
        },

        rowSetActionsEditing: function( $row ) {
            $row.find( '.on-editing' ).removeClass( 'hidden' );
            $row.find( '.on-default' ).addClass( 'hidden' );
        },

        rowSetActionsDefault: function( $row ) {
            $row.find( '.on-editing' ).addClass( 'hidden' );
            $row.find( '.on-default' ).removeClass( 'hidden' );
        }

    };

    $(function() {
        treasorTable.initialize();
    });

}).apply( this, [ jQuery ]);

</script>